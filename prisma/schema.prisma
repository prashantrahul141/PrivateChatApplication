generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model User {
    id            String         @id @default(cuid())
    name          String         @default("User")
    email         String?        @unique
    emailVerified DateTime?
    image         String         @default("/static/defaultavatar.png")
    accounts      Account[]
    sessions      Session[]
    Chats         ChatsOnUsers[]
}

model Chat {
    id       String         @id @default(cuid())
    messages Message[]
    Users    ChatsOnUsers[]
}

model ChatsOnUsers {
    user   User   @relation(fields: [userId], references: [id])
    userId String

    chat   Chat   @relation(fields: [chatId], references: [id])
    chatId String

    @@id([userId, chatId])
}

model Message {
    id   String @id @default(cuid())
    text String @default(" ")

    createdOn           DateTime @default(now())
    seenByParticiapants Boolean  @default(false)

    Chat   Chat?  @relation(fields: [chatId], references: [id])
    chatId String
}
